import Head from "next/head";
import { useState } from "react";
import {
  Container,
  Box,
  Typography,
  TextField,
  ButtonGroup,
  Button,
  Select,
  MenuItem,
  CircularProgress,
  IconButton,
  FormControl,
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
  LinearProgress,
} from "@mui/material";
import { GridColDef, DataGrid } from "@mui/x-data-grid";
import { TParticipant } from "@/types/data.type";
import { DatePicker } from "@mui/x-date-pickers";
import { EditOutlined, DeleteOutline } from "@mui/icons-material";
import {
  useGetParticipantsQuery,
  useAddParticipantMutation,
  useUpdateParticipantMutation,
  useDeleteParticipantMutation,
} from "@/redux/services/participants";
import dayjs, { Dayjs } from "dayjs";

type TFormState = Omit<TParticipant, "id">;

export default function Home() {
  const [formData, setFormData] = useState<TFormState>({
    name: "",
    email: "",
    gender: "Male",
    dateOfBirth: dayjs().format("YYYY-MM-DD"),
  });

  const [editId, setEditId] = useState("");
  const [deleteId, setDeletetId] = useState("");

  const { data, isLoading: isGetDataLoading } = useGetParticipantsQuery();

  const [addParticipant, { isLoading: isAddLoading }] =
    useAddParticipantMutation();
  const [updateParticipant, { isLoading: isUpdateEditing }] =
    useUpdateParticipantMutation();
  const [deleteParticipant, { isLoading: isDeleteLoading }] =
    useDeleteParticipantMutation();

  const updateFormData = (newVales: Partial<TFormState>) =>
    setFormData((prev) => ({ ...prev, ...newVales }));

  const columns: GridColDef<TParticipant>[] = [
    { field: "name", headerName: "Name", flex: 1 },
    { field: "gender", headerName: "Gender", flex: 1 },
    { field: "dateOfBirth", headerName: "Date of Birth", flex: 1 },
    { field: "email", headerName: "Email", flex: 1 },
    {
      headerName: "Action",
      width: 100,
      field: "id",
      renderCell: (param) => {
        const { row } = param;
        return (
          <Box
            sx={{
              display: "flex",
              justifyContent: "center",
              alignItems: "center",
              height: "100%",
            }}
          >
            <IconButton
              onClick={() => {
                const { id, ...other } = row;
                setEditId(id);
                updateFormData(other);
              }}
            >
              <EditOutlined />
            </IconButton>
            <IconButton onClick={() => setDeletetId(row.id)}>
              <DeleteOutline />
            </IconButton>
          </Box>
        );
      },
    },
  ];

  const clearForm = () =>
    updateFormData({
      name: "",
      email: "",
      gender: "Male",
      dateOfBirth: dayjs().format("YYYY-MM-DD"),
    });

  const onSubmitHandler = () => {
    addParticipant(formData)
      .unwrap()
      .then(() => {
        clearForm();
      });
  };

  const onUpdateDataHandler = () => {
    updateParticipant({ ...formData, id: editId })
      .unwrap()
      .then(() => clearForm());
  };

  const onDeleteHandler = () => deleteParticipant({ id: deleteId });

  const dayJsDob = dayjs(formData.dateOfBirth);

  const isLoading =
    isAddLoading || isUpdateEditing || isGetDataLoading || isDeleteLoading;

  return (
    <>
      <Head>
        <title>Sample Data Form</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      {isLoading ? (
        <LinearProgress sx={{ height: "5px" }} />
      ) : (
        <Box sx={{ width: "100%", height: "5px" }} />
      )}

      <Dialog open={deleteId !== ""} onClose={() => setDeletetId("")}>
        <DialogTitle>Delete Confirmation</DialogTitle>
        <DialogContent>Are you sure delete the data?</DialogContent>
        <DialogActions>
          <Button
            type="button"
            variant="outlined"
            color="secondary"
            onClick={() => setDeletetId("")}
          >
            Cancel
          </Button>
          <Button
            type="button"
            variant="contained"
            color="primary"
            onClick={() => {
              setDeletetId("");
              onDeleteHandler();
            }}
          >
            Delete
          </Button>
        </DialogActions>
      </Dialog>

      <Container
        maxWidth="xl"
        sx={{
          display: "flex",
          flexDirection: "row",
          alignItems: "flex-start",
          justifyContent: "center",
          height: "98vh",
          gap: 2,
        }}
      >
        <Box height="100%" width="100%" sx={{ maxWidth: "30%" }}>
          <Typography variant="h4" component="h1" gutterBottom paddingTop={5}>
            Participant Data Form
          </Typography>
          <Box>
            <form
              onSubmit={(e) => {
                e.preventDefault();
                if (editId) {
                  onUpdateDataHandler();
                } else {
                  onSubmitHandler();
                }
              }}
            >
              <TextField
                label="Name"
                variant="outlined"
                fullWidth
                margin="normal"
                required
                value={formData.name}
                onChange={(e) => updateFormData({ name: e.target.value })}
              />
              <Box marginTop={1}>
                <Select
                  labelId="gender-select-label"
                  variant="outlined"
                  label="Gender"
                  fullWidth
                  value={formData.gender}
                  onChange={(e) => updateFormData({ gender: e.target.value })}
                >
                  <MenuItem value="Male">Male</MenuItem>
                  <MenuItem value="Female">Female</MenuItem>
                </Select>
              </Box>
              <Box marginTop={1}>
                <FormControl>
                  <DatePicker
                    label="Date of Birth"
                    value={dayJsDob}
                    onChange={(newDate) => {
                      updateFormData({
                        dateOfBirth: newDate?.format("YYYY-MM-DD"),
                      });
                    }}
                    format="DD-MM-YYYY"
                  />
                </FormControl>
              </Box>
              <TextField
                label="Email"
                type="email"
                variant="outlined"
                fullWidth
                margin="normal"
                required
                value={formData.email}
                onChange={(e) => updateFormData({ email: e.target.value })}
              />
              <ButtonGroup
                sx={{
                  marginTop: 1,
                  display: "flex",
                  justifyContent: "flex-end",
                }}
              >
                <Button
                  type="submit"
                  variant="contained"
                  color="primary"
                  sx={{ marginRight: 1 }}
                  disabled={isLoading}
                >
                  Submit
                </Button>
                <Button
                  type="reset"
                  variant="outlined"
                  color="primary"
                  disabled={isLoading}
                >
                  Reset
                </Button>
              </ButtonGroup>
            </form>
          </Box>
        </Box>
        <Box
          height="100%"
          width="100%"
          sx={{ maxWidth: "70%", paddingTop: 13.6, maxHeight: "100%" }}
        >
          {isGetDataLoading ? (
            <Box
              sx={{
                display: "flex",
                justifyContent: "center",
                alignItems: "center",
                paddingTop: 15,
              }}
            >
              <CircularProgress />
            </Box>
          ) : (
            <DataGrid columns={columns} rows={data?.data || []} />
          )}
        </Box>
      </Container>
    </>
  );
}
